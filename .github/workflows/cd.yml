name: cd

on:
  push:
    branches: [main]

jobs:
  release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Set up Python ${{ matrix.python-version }}
          uses: actions/setup-python@v4
          with:
            python-version: ${{ matrix.python-version }}

        - name: Install Poetry
          run: pipx install poetry

        - name: Install dependencies
          run: |
            poetry install
            python -m pip install --upgrade pip
            pip install python-semantic-release

        - name: Get new version
          run: echo "NEW_VERSION=$(python -c 'from version import NEW_VERSION; print(NEW_VERSION)')" >> $GITHUB_ENV

        - name: Get latest commit head
          run: echo "LATEST_COMMIT=$(git rev-parse --short --verify main)" >> $GITHUB_ENV

        - name: Semantic Release
          env: 
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            NEW_VERSION: ${{ env.NEW_VERSION }}
            LATEST_COMMIT: ${{ env.LATEST_COMMIT }}
          run: |
            git config user.name github-actions
            git config user.email github-actions@github.com
            semantic-release changelog
            pip install toml
            python update_version.py
            echo $NEW_VERSION $LATEST_COMMIT
            git tag $NEW_VERSION $LATEST_COMMIT
            poetry build --format=sdist

        - name: Create Release
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
            NEW_VERSION: ${{ env.NEW_VERSION }}
            LATEST_COMMIT: ${{ env.LATEST_COMMIT }}
          with:
            tag_name: ${{ env.NEW_VERSION }}
            release_name: ${{ env.NEW_VERSION }}
            draft: false
            prerelease: false
            # body_path: CHANGELOG.md
            # ['tag_name', 'release_name', 'body', 'body_path', 'draft', 'prerelease', 'commitish', 'owner', 'repo']

        - name: build
          run: poetry build --format=sdist

        - name: get tree structure
          run: |
            pip install seedir
            python -c "import seedir as sd; sd.seedir('.')"

        - name: upload assets
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ github.token }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: ./dist/poki_books-${{ env.NEW_VERSION }}-tar.gz
            asset_name: poki_books-${{ env.NEW_VERSION }}-tar.gz
            asset_content_type: application/gzip
        