name: CD

on:
  push:
    tags: "v*"

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      checks: write
      actions: read
      issues: read
      packages: write
      statuses: read
      pull-requests: write
      repository-projects: write

    strategy:
      matrix:
        python-version: ["3.10.12"]
        branch: ["main"]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure Main Branch
        run: git checkout ${{ matrix.branch }}
        
      - name: Extract Version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Change Version
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          pip install toml
          python ./scripts/change_version.py ${{ env.VERSION }}

      - name: Install Poetry
        run: pipx install poetry

      - name: Install Dependencies
        run: |
          poetry install
          python -m pip install --upgrade pip
          pip install python-semantic-release

      - name: Create Changelog
        run: poetry run semantic-release changelog

      - name: GitHub Setup
        env: 
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
        
        #remove
      - name: Update Version in Poetry
        env:
          VERSION: ${{ env.VERSION }}
        run: poetry version ${{ env.VERSION }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: v${{ env.VERSION }}
          draft: false
          prerelease: false
          body_path: CHANGELOG.md

      - name: Build for Linux and Windows 
        run: ./scripts/executables.sh          
        
      - name: Zip Builds
        run: ./scripts/zip.sh

      - name: Upload Windows Version
        id: upload-release-asset-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./pokibooks-windows.zip
          asset_name: pokibooks-windows.zip
          asset_content_type: application/zip

      - name: Upload Linux Version
        id: upload-release-asset-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./pokibooks-linux.tar.gz
          asset_name: pokibooks-linux.tar.gz
          asset_content_type: application/gzip

  mac-release:
    needs: release
    runs-on: macos-latest
    permissions:
      contents: write
      checks: write
      actions: read
      issues: read
      packages: write
      statuses: read
      pull-requests: write
      repository-projects: write

    strategy:
      matrix:
        python-version: ["3.10.12"]
        branch: ["main"]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # before checkout?
      - name: Ensure Main Branch
        run: git checkout ${{ matrix.branch }}
      
      # change to matrix version
      - name: Install Python via Homebrew
        run: |
          brew install python@3.10
          echo "export PATH=\"/opt/homebrew/opt/python@3.10/bin:\$PATH\"" >> ~/.zshrc
          export PATH="/opt/homebrew/opt/python@3.10/bin:$PATH"

      - name: GitHub Setup
        env: 
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
      
      - name: Install Dependencies
        run: pip install pyinstaller

      - name: Build macOS Application
        run: pyinstaller --specpath PokiBooksMacOs.spec ./src/poki_books.py

      - name: Zip macOS Build
        run: zip -r pokibooks-macos.zip /dist/PokiBooksMacOs/
      
      - name: Upload macOS Version
        id: upload-release-asset-macos
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./pokibooks-macos.zip
          asset_name: pokibooks-macos.zip
          asset_content_type: application/zip

  checksums:
    needs: mac-release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create Checksums
        run: ./scripts/checksums.sh

      - name: Upload Checksums
        id: upload-release-asset-checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain
