name: cd

on:
  push:
    tags: "v*"

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      checks: write

      actions: read
      issues: read
      packages: write
      statuses: read
      pull-requests: write
      repository-projects: write

    strategy:
      matrix:
        python-version: ["3.10.12"]
        branch: ["main"]
    steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Ensure Main Branch
          run: git checkout ${{ matrix.branch }}

        - name: Setup Python ${{ matrix.python-version }}
          uses: actions/setup-python@v4
          with:
            python-version: ${{ matrix.python-version }}

        - name: Install Poetry
          run: pipx install poetry

        - name: Install Dependencies
          run: |
            poetry install
            python -m pip install --upgrade pip
            pip install python-semantic-release

        - name: Create Changelog
          run: poetry run semantic-release changelog

        - name: Setup
          env: 
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
            git config user.name github-actions
            git config user.email github-actions@github.com

        - name: Extract Version
          run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        
        - name: Update version
          env:
            VERSION: ${{ env.VERSION }}
          run: |
            poetry version ${{ env.VERSION }}
          # change version in file so user can see what version their using and maybe an id?


        - name: Create Release
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
            VERSION: ${{ env.VERSION }}
          with:
            tag_name: v${{ env.VERSION }}
            release_name: v${{ env.VERSION }}
            draft: false
            prerelease: false
            body_path: CHANGELOG.md
            # ['tag_name', 'release_name', 'body', 'body_path', 'draft', 'prerelease', 'commitish', 'owner', 'repo']

        - name: Build
          run: ./scripts/make_executables.sh

        - name: Upload windows version
          id: upload-release-asset 
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ github.token }}
            VERSION: ${{ env.VERSION }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
            asset_path: ./dist/pokibooks-windows.zip
            asset_name: pokibooks-windows.zip
            asset_content_type: application/zip


        - name: Upload linux version
          id: upload-release-asset 
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ github.token }}
            VERSION: ${{ env.VERSION }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
            asset_path: ./dist/pokibooks-linux.zip
            asset_name: pokibooks-linux.zip
            asset_content_type: application/zip
        
        - name: Upload mac version
          id: upload-release-asset 
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ github.token }}
            VERSION: ${{ env.VERSION }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
            asset_path: ./dist/pokibooks-macos.zip
            asset_name: pokibooks-macos.zip
            asset_content_type: application/zip

        - name: Create checksums
          run: ./scripts/checksums.sh

        - name: Upload checksums
          id: upload-release-asset 
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ github.token }}
            VERSION: ${{ env.VERSION }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
            asset_path: ./checksums.txt
            asset_name: checksums.txt
            asset_content_type: text/plain

